parameters:
  additionalHelmArguments:     '--wait'

jobs: # using jobs so they each run in parallel

- job: deploycontainerHealthService
  displayName: 'Deploy HealthService workload'
  steps:

    - download: current # download pipeline artifacts

    - template: steps-buildagent-prerequisites.yaml

    - task: AzureCLI@2
      displayName: 'Install workload healthservice on AKS clusters'
      inputs:
        azureSubscription: $(azureServiceConnection)
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |

          helm lint src/app/charts/healthservice # lint helm chart

          # load json data from downloaded terraform artifact
          $releaseUnitInfraDeployOutput = Get-ChildItem $(Pipeline.Workspace)/terraformOutputReleaseUnitInfra/*.json | Get-Content | ConvertFrom-JSON

          # loop through stamps from pipeline artifact json
          foreach($stamp in $releaseUnitInfraDeployOutput.stamp_properties.value) {

            $aksClusterName = $stamp.aks_cluster_name
            $aksClusterResourceGroup = $stamp.resource_group_name

            $region = $(az eventhubs namespace list --resource-group $aksClusterResourceGroup --query "[0].location" --output tsv)
            echo "*** Use Azure Region $region from Event Hub namespace."

            echo "*** Load credentials for AKS Cluster $aksClusterName in $aksClusterResourceGroup"
            az aks get-credentials --name $aksClusterName --resource-group $aksClusterResourceGroup --overwrite-existing

            $fullContainerImageName = Get-Content -Path "$(Pipeline.Workspace)/healthservice-containerImageName/healthservice.txt"
            echo "*** Retrieved container image name from artifact - $fullContainerImageName"

            # Apply workload worker helm chart
            echo  "*** Deploy healthservice to $aksClusterName (in $aksClusterResourceGroup) via helm chart"
            helm upgrade --install healthservice-workload src/app/charts/healthservice `
                          --namespace $(workloadNamespace) `
                          --set containerimage="$fullContainerImageName" `
                          --set azure.region="$region" `
                          ${{ parameters.additionalHelmArguments }}

            # Wait for healthservice-deploy k8s deployment to come up
            $retrycount = 0;
            $maxretrycount = 5
            do {
              kubectl rollout status deployment/healthservice-deploy -n $(workloadNamespace)

              if ($LASTEXITCODE -ne 0) {
                $retrycount++;
                echo "Deployment not ready. Retrying... $retrycount/$maxretrycount";
                start-sleep $(60*$retrycount) # sleep for <retry> * 60 seconds
              } else {
                $retrycount = $maxretrycount
              }
            } while ( ($retrycount -lt $maxretrycount) )
          }

- job: deploycontainerCatalogService
  displayName: 'Deploy CatalogService workload'
  dependsOn: deploycontainerHealthService
  steps:

    - download: current # download pipeline artifacts

    - template: steps-buildagent-prerequisites.yaml

    - task: AzureCLI@2
      displayName: 'Install workload CatalogService on AKS clusters'
      inputs:
        azureSubscription: $(azureServiceConnection)
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |

          helm lint src/app/charts/catalogservice # lint helm chart

          # load json data from downloaded terraform artifact
          $releaseUnitInfraDeployOutput = Get-ChildItem $(Pipeline.Workspace)/terraformOutputReleaseUnitInfra/*.json | Get-Content | ConvertFrom-JSON

          $globalInfraDeployOutput = Get-ChildItem $(Pipeline.Workspace)/terraformOutputGlobalInfra/*.json | Get-Content | ConvertFrom-JSON

          $frontDoorId = $globalInfraDeployOutput.frontdoor_id_header.value
          echo "*** Retrieved Azure Front Door Header ID $frontDoorId"

          $frontDoorFqdn = $globalInfraDeployOutput.frontdoor_fqdn.value
          echo "*** Retrieved Azure Front Door FQDN $frontDoorFqdn"

          # loop through stamps from pipeline artifact json
          foreach($stamp in $releaseUnitInfraDeployOutput.stamp_properties.value) {

            $aksClusterName = $stamp.aks_cluster_name
            $aksClusterResourceGroup = $stamp.resource_group_name

            # We are using the Region of the EH namespace as a workaround since this has the right format for the Cosmos SDK ("East US 2" instead of "eastus2") 

            $region = $(az eventhubs namespace list --resource-group $aksClusterResourceGroup --query "[0].location" --output tsv)
            echo "*** Use Azure Region $region from Event Hub namespace."

            # load AKS cluster credentials
            echo "*** Load credentials for AKS Cluster $aksClusterName in $aksClusterResourceGroup"
            az aks get-credentials --name $aksClusterName --resource-group $aksClusterResourceGroup --overwrite-existing

            $fqdn = $stamp.aks_cluster_ingress_fqdn
            echo "*** Retrieved Ingress Controller FQDN $fqdn for AKS cluster $aksClusterName"

            $fullContainerImageName = Get-Content -Path "$(Pipeline.Workspace)/catalogservice-containerImageName/catalogservice.txt"
            echo "*** Retrieved full container image name from artifact - $fullContainerImageName"

            # Apply workload CatalogService helm chart
            echo "*** Deploy workload CatalogService to $aksClusterName (in $aksClusterResourceGroup) via helm chart"
            echo "*** Using container image $fullContainerImageName"

            helm upgrade --install workload-catalogservice src/app/charts/catalogservice --namespace "$(workloadNamespace)" `
                         --set azure.frontdoorid="$frontDoorId" `
                         --set azure.region="$region" `
                         --set azure.baseurl="$frontDoorFqdn" `
                         --set containerimage="$fullContainerImageName" `
                         --set workload.domainname="$fqdn" `
                         ${{ parameters.additionalHelmArguments }}

            # Wait for CatalogService-deploy k8s deployment to come up
            $retrycount = 0;
            $maxretrycount = 5
            do {
              kubectl rollout status deployment/catalogservice-deploy -n $(workloadNamespace)

              # checking if certificate for CatalogService-ingress-secret was issued
              if ($(kubectl get certificates/catalogservice-ingress-secret -n $(workloadNamespace) -o 'jsonpath={..status.conditions[?(@.type==\"Ready\")].status}') -ne "True")
              {
                $LASTEXITCODE=1
                echo "certificate for catalogservice-ingress-secret pending.. "
              }

              if ($LASTEXITCODE -ne 0) {
                $retrycount++;
                echo "Deployment not ready. Retrying... $retrycount/$maxretrycount";
                start-sleep $(60*$retrycount) # sleep for <retry> * 60 seconds
              } else {
                $retrycount = $maxretrycount
              }
            } while ( ($retrycount -lt $maxretrycount) )
          }

- job: deploycontainerBackgroundProcessor
  displayName: 'Deploy BackgroundProcessor workload'
  dependsOn: deploycontainerHealthService
  steps:

    - download: current # download pipeline artifacts

    - template: steps-buildagent-prerequisites.yaml

    - task: AzureCLI@2
      displayName: 'Install workload BackgroundProcessor on AKS clusters'
      inputs:
        azureSubscription: $(azureServiceConnection)
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |

          helm lint src/app/charts/backgroundprocessor # lint helm chart

          # load json data from downloaded terraform artifact
          $releaseUnitInfraDeployOutput = Get-ChildItem $(Pipeline.Workspace)/terraformOutputReleaseUnitInfra/*.json | Get-Content | ConvertFrom-JSON

          $globalInfraDeployOutput = Get-ChildItem $(Pipeline.Workspace)/terraformOutputGlobalInfra/*.json | Get-Content | ConvertFrom-JSON

          # loop through stamps from pipeline artifact json
          foreach($stamp in $releaseUnitInfraDeployOutput.stamp_properties.value) {

            $aksClusterName = $stamp.aks_cluster_name
            $aksClusterResourceGroup = $stamp.resource_group_name

            # We are using the Region of the EH namespace as a workaround since this has the right format for the Cosmos SDK ("East US 2" instead of "eastus2")
            $region = $(az eventhubs namespace list --resource-group $aksClusterResourceGroup --query "[0].location" --output tsv)
            echo "*** Use Azure Region $region from Event Hub namespace."

            echo "*** Load credentials for AKS Cluster $aksClusterName in $aksClusterResourceGroup"
            az aks get-credentials --name $aksClusterName --resource-group $aksClusterResourceGroup --overwrite-existing

            $fullContainerImageName = Get-Content -Path "$(Pipeline.Workspace)/backgroundprocessor-containerImageName/backgroundprocessor.txt"
            echo "*** Retrieved full container image name from artifact - $fullContainerImageName"

            # Apply workload BackgroundProcessor helm chart
            echo  "*** Deploy workload BackgroundProcessor to $aksClusterName (in $aksClusterResourceGroup) via helm chart"
            helm upgrade --install workload-backgroundprocessor src/app/charts/backgroundprocessor `
                         --namespace $(workloadNamespace) `
                         --set containerimage="$fullContainerImageName" `
                         --set azure.region="$region" `
                         ${{ parameters.additionalHelmArguments }}

            # Wait for BackgroundProcessor-deploy k8s deployment to come up
            $retrycount = 0;
            $maxretrycount = 5
            do {
              kubectl rollout status deployment/backgroundprocessor-deploy -n $(workloadNamespace)
              if ($LASTEXITCODE -ne 0) {
                $retrycount++;
                echo "Deployment not ready. Retrying... $retrycount/$maxretrycount";
                start-sleep $(60*$retrycount) # sleep for <retry> * 60 seconds
              } else {
                $retrycount = $maxretrycount
              }
            } while ( ($retrycount -lt $maxretrycount) )

          }

- job: deployuiapp
  displayName: 'Deploy UI App to Storage Account'
  steps:

    - download: current # download pipeline artifacts

    - task: AzureCLI@2
      displayName: 'Upload UI app to Blob Storage'
      inputs:
        azureSubscription: $(azureServiceConnection)
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |

          $configFilePath = "$(Pipeline.Workspace)/uiApp/config.js"
          # load JSON data from downloaded terraform artifact
          $releaseUnitInfraDeployOutput = Get-ChildItem $(Pipeline.Workspace)/terraformOutputReleaseUnitInfra/*.json | Get-Content | ConvertFrom-JSON

          # loop through stamps from pipeline artifact json
          foreach($stamp in $releaseUnitInfraDeployOutput.stamp_properties.value) {

            echo "*** Uploading UI app to storage account $($stamp.public_storage_account_name) in stamp $($stamp.location)"

            $keyVaultName = $stamp.key_vault_name
            $appInsightsKey = $(az keyvault secret show --name APPINSIGHTS-INSTRUMENTATIONKEY --vault-name $keyVaultName --query "value" -o tsv)

            # remove config.js file, which needs to be regenerated for each environment
            echo "*** Deleting the old config.js file"
            Remove-Item -Path $configFilePath

            echo "*** Storing configuration to $configFilePath"
            # warning: make sure that these variable names are in sync with client code
            Add-Content -Path $configFilePath -Value "window.API_URL = `"/api`""
            Add-Content -Path $configFilePath -Value "window.APPINSIGHTS_INSTRUMENTATIONKEY = `"$appInsightsKey`""

            $versionLabel = "$(riVariant)-$("$(Build.SourceBranch)" -Replace 'refs/heads/', '')-$(Build.BuildId)"
            echo "*** DEBUG: Setting VERSION_LABEL to $versionLabel"
            Add-Content -Path $configFilePath -Value "window.VERSION_LABEL = `"$versionLabel`""

            # clear the storage container first, before uploading, to remove any stale files
            echo "*** Clearing storage container"
            az storage blob delete-batch --account-name $stamp.public_storage_account_name --source '$web' --auth-mode key

            if($LastExitCode -ne 0)
            {
                throw "*** Error on clearing storage account $($stamp.public_storage_account_name)"
            }

            # upload compiled code to Storage $web container
            echo "*** Uploading UI application to Blob Storage"
            az storage blob upload-batch --account-name $stamp.public_storage_account_name --destination '$web' --source $(Pipeline.Workspace)/uiApp/ --auth-mode key

            if($LastExitCode -ne 0)
            {
                throw "*** Error on upload to storage account $($stamp.public_storage_account_name)"
            }
          }
