parameters:
  - name: 'storageAccountName' # Name of the terraform state storage account. Needs to be globally unique
    type: string
  - name: 'resourceGroupName'  # Name of the resource group where the state storage accounts gets created. Will be created if not exists
    type: string
  - name: 'usePrivateEndpoints' # Protect the terraform state store with Private Endpoints? Can only be used with private build agents!
    type: string
    default: 'false'

steps:

# Check if Terraform state store exists and create it if not
- task: AzureCLI@2
  displayName: 'Setup Terraform state store'
  inputs:
    azureSubscription: $(azureServiceConnection)
    scriptType: pscore
    scriptLocation: inlineScript
    inlineScript: |
      echo "*** Check if Resource Group ${{ parameters.resourceGroupName }} exists"
      $checkRg = az group exists --name ${{ parameters.resourceGroupName }} | ConvertFrom-Json
      if (!$checkRg) {
        Write-Warning "*** WARN! Resource Group ${{ parameters.resourceGroupName }} does not exist. Creating..."
        $locations = '$(stampLocations)' | ConvertFrom-Json -NoEnumerate # get the stamp locations and use the first one to create the resource group there. The region does not really matter.
        az group create --name ${{ parameters.resourceGroupName }} --location $locations[0]

        if ($LASTEXITCODE -eq 1) {
          Write-Error "*** Error - could not create resource group"
        }
      }
      else
      {
        echo "*** Ok"
      }
      echo "*** Check if Storage Account ${{ parameters.storageAccountName }} exists"
      $check = az storage account show --name ${{ parameters.storageAccountName }} `
                                       --resource-group ${{ parameters.resourceGroupName }} | ConvertFrom-Json
      if (!$check) {
        Write-Warning "*** WARN! Storage Account ${{ parameters.storageAccountName }} does not exist. Creating..."
        az storage account create --name ${{ parameters.storageAccountName }} `
                                  --resource-group ${{ parameters.resourceGroupName }} `
                                  --https-only true `
                                  --sku Standard_GZRS `
                                  --min-tls-version TLS1_2
        if ($LASTEXITCODE -eq 1) {
          Write-Error "*** Error - could not create storage account"
        }
      }
      else
      {
        echo "*** Ok"
      }

      echo "*** Set a resource lock on storage account ${{ parameters.storageAccountName }}"
      az lock create --name LockStateStore `
              --lock-type CanNotDelete `
              --resource-group ${{ parameters.resourceGroupName }} `
              --resource-name  ${{ parameters.storageAccountName }} `
              --resource-type Microsoft.Storage/storageAccounts

      $servicePrincipalId = $(az account show --query "user.name" -o tsv)
      $storageAccountId = $(az storage account show --name ${{ parameters.storageAccountName }} `
                                                    --resource-group ${{ parameters.resourceGroupName }} `
                                                    --query "id" -o tsv)


      # Create role assignment for the deploying service principal on the storage account.
      # Terraform will then use RBAC to access the storage account instead of account keys

      $roleName = "Storage Blob Data Owner"

      # Check if the role assignment already exists
      $existingRole = az role assignment list --assignee $servicePrincipalId --role $roleName --scope $storageAccountId | ConvertFrom-Json

      if(-not $existingRole)
      {
        echo "*** Creating role assignment $roleName for deploying service principal on $storageAccountId"
        az role assignment create --assignee $servicePrincipalId --role $roleName --scope $storageAccountId
      }
      else
      {
        echo "*** Role assignment $roleName already exists on Terraform state storage ${{ parameters.storageAccountName }}"
      }

      if ($LASTEXITCODE -eq 1) {
        Write-Error "*** Error - could not create role assignment"
      }

      $terraformContainerName = "tfstate" # do not change unless you have a strong reason to. If so, also change in 'terraform init' step template
      echo "*** Check if Container $terraformContainerName exists"
      $check = az storage container exists --account-name ${{ parameters.storageAccountName }} `
                                           --name $terraformContainerName --auth-mode login | ConvertFrom-Json
      if (!$check.exists) {
        Write-Warning "*** WARN! Container $terraformContainerName does not exist. Creating..."
        az storage container create --name $terraformContainerName `
                                    --account-name ${{ parameters.storageAccountName }} `
                                    --public-access off `
                                    --auth-mode login

        if ($LASTEXITCODE -eq 1) {
          Write-Error "*** Error - could not create storage container"
        }
      }
      else
      {
        echo "*** Ok"
      }
      # Enable 7 days soft delete on container and blob-level for the TF state storage account
      # The command is idempotent, so we can run it every time without other checks
      echo "*** Enabling versioning and soft delete on container- and blob-level"
      az storage account blob-service-properties update `
                                                --account-name ${{ parameters.storageAccountName }} `
                                                --resource-group ${{ parameters.resourceGroupName }} `
                                                --enable-versioning true `
                                                --enable-delete-retention true `
                                                --delete-retention-days 7 `
                                                --enable-container-delete-retention true `
                                                --container-delete-retention-days 7

      if ($LASTEXITCODE -eq 1) {
        Write-Error "*** Error - could not update storage account properties"
      }

      # In private mode, create Private Endpoints for the private Build Agents
      if('${{ parameters.usePrivateEndpoints }}' -eq [bool]::TrueString)
      {
        echo "*** Checking if Private Endpoints for terraform state storage ${{ parameters.storageAccountName }} already exists"
        $storageAccountId = $(az storage account show --name ${{ parameters.storageAccountName }} `
                                                      --resource-group ${{ parameters.resourceGroupName }} `
                                                      --query "id" -o tsv)
        $peName = "${{ parameters.storageAccountName }}-pe"
        $existingPe = $(az network private-endpoint show -n $peName -g $(buildAgentResourceGroupName) ) | ConvertFrom-JSON
        if($existingPe)
        {
          echo "*** Private Endpoint $peName already exists"
        }
        else
        {
          echo "*** Creating Private Endpoints for terraform state storage ${{ parameters.storageAccountName }}"
          # Create the private endpoint itself
          az network private-endpoint create `
          --name $peName `
          --resource-group $(buildAgentResourceGroupName) `
          --vnet-name $(buildAgentVnetName) `
          --subnet "private-endpoints-snet" `
          --private-connection-resource-id $storageAccountId `
          --group-id blob `
          --connection-name myConnection

          if ($LASTEXITCODE -eq 1) {
            Write-Error "*** Error - could not create storage private endpoint"
          }

          # Create a DNS entry in the private blob.core.windows.net DNS zone of the build agent
          az network private-endpoint dns-zone-group create `
          --resource-group $(buildAgentResourceGroupName) `
          --endpoint-name $peName `
          --name "tfprivatednsstorageblob" `
          --private-dns-zone "privatelink.blob.core.windows.net" `
          --zone-name blob
          # Disable public access (access now only via Private Endpoint)
          az storage account update --name ${{ parameters.storageAccountName }} `
                                    --resource-group ${{ parameters.resourceGroupName }} `
                                    --public-network-access Disabled
          echo "*** Sleeping for 120 seconds to let the private endpoint become effective"
          start-sleep -s 120
        }
      }