name: '[${{ parameters.environment }}] $(BuildDefinitionName).$(DayOfYear)$(Rev:.r)'

trigger: none

pr: none

parameters:
- name: environment
  displayName: 'Environment (Subscriptions)'
  type: string
  default: 'int'
  values:
  - int
  - prod

pool:
  vmImage: 'ubuntu-20.04'

variables:
- name:  'environment' # set the environment name as variable
  value: '${{ parameters.environment }}'
- name:  'workingDirectory'       # Terraform working directory
  value: 'src/testing/userload-generator'
- name:  'azureServiceConnection' # environment specific service connection
  value: 'alwayson-${{ parameters.environment }}-serviceconnection'

- template: config/configuration.yaml # contains version numbers and global configuration settings
- template: config/variables-values-${{ parameters.environment }}.yaml # contains environment-specific values (non-secret)

stages:

- stage: deployinfrastructure
  displayName: 'Deploy Load Generator Infrastructure' # Deploy Azure Infrastructure
  jobs:
  - job: deployterraform
    displayName: 'Deploy Terraform'
    steps:
    - checkout: self # checkout github repository

    - template: templates/steps-terraform-init.yaml # Initialize Terraform
      parameters:
        terraformStorageAccountName:       '$(terraformStorageAccount)'
        terraformStorageResourceGroupName: '$(terraformResourceGroup)'
        terraformStateFilename:            'terraform-loadgenerator-$(prefix).state'
        terraformWorkingDirectory:         '$(workingDirectory)/infra'

    - template: templates/steps-terraform-apply.yaml
      parameters:
        jobName:                    'LoadgeneratorInfra'
        terraformWorkingDirectory:  '$(workingDirectory)/infra'
        customPrefix:               '$(prefix)'
        customAttributes:           '-var targeturl="https://www.$(envDomainName)"
                                     -var=queued_by="$(Build.QueuedBy)"'

- stage: deployRegionalFunctionsApps
  displayName: 'Deploy Regional Function Apps'
  jobs:
  - job: regionalFunctionsAppDeploy
    displayName: 'App deploy to regional Function Apps'
    steps:

      - checkout: self # checkout github repository
      - download: current # download pipeline artifacts

      - task: Bash@3
        displayName: 'Install Function Core Tools'
        inputs:
          targetType: 'inline'
          script: |

            echo "*** Installing Function-core-tools@4"

            curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg
            sudo mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg
            sudo sh -c 'echo "deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-ubuntu-$(lsb_release -cs)-prod $(lsb_release -cs) main" > /etc/apt/sources.list.d/dotnetdev.list'
            sudo apt-get update
            sudo apt-get install azure-functions-core-tools-4

            echo "*** Installed Azure Function Core Tools version: $(func -v)"

      - task: PowerShell@2
        displayName: 'Copy test files' # the Playwright test definition is not stored with the Function so we need to copy it over
        inputs:
          targetType: inline
          script: |

            echo "*** Copying Playwright test definition file src/testing/ui-test-playwright/cataloguserflow.spec.js to $(workingDirectory)/AzureFunctions/RegionalLoadGenerator"
            Copy-Item "src/testing/ui-test-playwright/cataloguserflow.spec.js" -Destination "$(workingDirectory)/AzureFunctions/RegionalLoadGenerator"

      - task: PowerShell@2
        displayName: 'npm install'
        env:
            PLAYWRIGHT_BROWSERS_PATH: 0 # Required so that npm build will store the browser binaries inside the node_modules folder
        inputs:
          targetType: inline
          script: |

            cd "$(workingDirectory)/AzureFunctions/RegionalLoadGenerator"

            echo "*** Running npm ci" # npm ci (install) will download - amongst the other packages - the Chromium browser binaries
            npm ci

      - task: AzureCLI@2
        displayName: 'Deploy regional load generator Functions'
        inputs:
          azureSubscription: $(azureServiceConnection)
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |

            # load json data from downloaded terraform artifact
            $infraDeployOutput = Get-ChildItem $(Pipeline.Workspace)/terraformOutputLoadgeneratorInfra/*.json | Get-Content | ConvertFrom-JSON

            $rgName = $infraDeployOutput.resource_group_name.value

            cd "$(workingDirectory)/AzureFunctions/RegionalLoadGenerator"

            # loop through geos / loadgen functions from pipeline artifact json
            foreach ($geosFunctions in $infraDeployOutput.loadgen_function_names_per_geo.value.PSObject.Properties) {
                $geoName = $geosFunctions.Name.Replace("FUNCTIONS_", "")
                $functions = $geosFunctions.Value.Split(",")

                echo "*** Processing Geo $geoName Functions: $functions"

                foreach($function in $functions)
                {
                    echo "*** Deploying to Function App $function in resource group $rgName"
                    func azure functionapp publish $function --build local --javascript
                }

                echo "Finished deploying to all Functions in geo $geoName"
                echo "****************************************************"
            }

- stage: deployMasterFunctionsApp
  displayName: 'Deploy Master Function App'
  jobs:
  - job: masterFunctionAppDeploy
    displayName: 'App Master deploy to Function App'
    steps:

      - checkout: self # checkout github repository
      - download: current # download pipeline artifacts

      - task: Bash@3
        displayName: 'Install Function Core Tools'
        inputs:
          targetType: 'inline'
          script: |

            echo "*** Installing Function-core-tools@4"

            curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg
            sudo mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg
            sudo sh -c 'echo "deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-ubuntu-$(lsb_release -cs)-prod $(lsb_release -cs) main" > /etc/apt/sources.list.d/dotnetdev.list'
            sudo apt-get update
            sudo apt-get install azure-functions-core-tools-4

            echo "*** Installed Azure Function Core Tools version: $(func -v)"

      - task: UseDotNet@2
        displayName: 'Use .NET Core SDK $(dotnetSdkVersion)'
        inputs:
          packageType: sdk
          version: $(dotnetSdkVersion)
          installationPath: $(Agent.ToolsDirectory)/dotnet

      - task: AzureCLI@2
        displayName: 'Deploy master Function'
        inputs:
          azureSubscription: $(azureServiceConnection)
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |

            # load json data from downloaded terraform artifact
            $infraDeployOutput = Get-ChildItem $(Pipeline.Workspace)/terraformOutputLoadgeneratorInfra/*.json | Get-Content | ConvertFrom-JSON

            $rgName = $infraDeployOutput.resource_group_name.value
            $masterFunctionName = $infraDeployOutput.master_function_name.value

            echo "*** Deploying to Master Function App $masterFunctionName in resource group $rgName"
            cd "$(workingDirectory)/AzureFunctions/GlobalOrchestrator"
            func azure functionapp publish $masterFunctionName --csharp
